// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectsAndWorkers.Data;

#nullable disable

namespace ProjectsAndWorkers.Data.Migrations
{
    [DbContext(typeof(ProjectsAndWorkersDataContext))]
    [Migration("20250415190626_ChangeOnDelete")]
    partial class ChangeOnDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ProjectWorker", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Project_Worker", (string)null);
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("ProjectWorker", b =>
                {
                    b.HasOne("ProjectsAndWorkers.Data.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .IsRequired();

                    b.HasOne("ProjectsAndWorkers.Data.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.Project", b =>
                {
                    b.HasOne("ProjectsAndWorkers.Data.Models.Worker", "ManagerNavigation")
                        .WithMany("ProjectsToManage")
                        .HasForeignKey("ManagerId");

                    b.Navigation("ManagerNavigation");
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.TaskEntity", b =>
                {
                    b.HasOne("ProjectsAndWorkers.Data.Models.Worker", "Author")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectsAndWorkers.Data.Models.Worker", "Performer")
                        .WithMany("PerformingTasks")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectsAndWorkers.Data.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Performer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectsAndWorkers.Data.Models.Worker", b =>
                {
                    b.Navigation("CreatedTasks");

                    b.Navigation("PerformingTasks");

                    b.Navigation("ProjectsToManage");
                });
#pragma warning restore 612, 618
        }
    }
}
